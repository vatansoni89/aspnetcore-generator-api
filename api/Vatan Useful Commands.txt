All from Wahlin:

windows 10 pro + enterpri.
docker machine not needed often if we use docker CE(win 10 and above)
Docker Engine = Docker Deamon
Pull image:
docker pull ImageName

Images list:
docker images

Run image as a container:
docker run ImageName

List of running containers:
docker ps

List of all containers:
docker ps -a 

Remove container:
docker rm container_Initials

Remove image:
docker rmi Image_Initial


pull image from hub
list of images:
docker images

run the image:
docker run -p 80:80 ImageName

(80:90 ->connect port 80 on the machine to 90 on container.)
stop docker client tool:
docker stop d7

 list of running container:
docker ps

list of all containers:
docker ps -a

remove container:
docker rm d7

list of images:
docker images

delete image:
docker rmi imageid_Initial




(image will exist even we have delete container, as we can use that image in other container. so delete it seperately if not required.)
Docker Compose Build process can actually generate images that we can use to create containers.


Docker compose command (will work based on yml file content):

1. Build services and images(all):
docker-compose build
docker-compose build mongo //only mongo srv.


2. Images to running container:
docker-compose up
docker-compose up --no-deps node
//dont up dependencies, only node

3. Tear down containers:
docker-compose down //(stop and remove all containers.)

docker-compose down --rmi all --volumes //(also removes all images and volumes.)



4. view logs:
docker-compose logs

5. list of containers running:
docker-compose ps

6. Stop all the services:
docker-compose stop

7. Start all the services:
docker-compose start

8. Remove containers that are making services:
docker-compose rm



Docker-compose for aspnetcore
Windows Kubernetties config
1. Know kubnet. version:
kubectl version

2. Get info about deployent or services or pods or nods:
kubectl get [deployments | services |pods]

3. Running one container:
kubectl run nginx-server --image=nginx:alpine

4. Apply deployment files and services:
kubectl apply -f [fileName | folderName]

5. Port forward from pod:
kubectl port-forward [name-of-pod]  8080:80
1. Docker is a process, and Image provides file system for that process.
2. Image provides file system for an application when it run inside container.

server version:
docker version

run image inside container:
docker run --rm -it microsoft/dotnet:2-runtime dotnet --info

website run from ps:
dotnet restore
dotnet run
asli

Creating Volume (windows):
docker run --rm -it -v  ${PWD}:C:\api  microsoft/dotnet:2-runtime

Creating Volume with port forwarding (windows):
docker run --rm -it -v  ${PWD}:C:\api -p 8080:80  microsoft/dotnet:2-runtime


run website from mounting(windows):
dotnet api\bin\Debug\netcoreapp2.0\publish\api.dll

Creating Volume with port forwarding (Linux):
docker run --rm -it -v  ${PWD}:/api -p 8080:80  microsoft/dotnet:2-runtime


If you run a Docker command from a shell with a volume mount (as in the example above) or kick off a Compose file that includes volume mounts, 
you get a popup asking if you want to share the specified drive.

(So it will behave like same folder at both places for any operation like add file, delete file etc.)
Each process have its own Network Card (i.e.) it have its own IP address.
Get docker IP address:
docker ps //get id of docker

Get IP address:
inspect docker dockeridInitials
Docker want to access C:, Linux env.
Gyan, how can we use mount drive outside of container folder
Linux vs Window container:
1. volume mounting difference.
2. docker takes image based on which env its running (linux or windows.)
Every thing till now in 30 sec..

//Be careful that u have published it already otherwise publish folder wont be there which is mention in Dockerfile
************IMP***************
create image:
docker build -t aspnetcore/generator .
(it will look for Dockerfile in project folder and follow the instructions, . => current directory)



run image in container:
docker run --rm -it -p 8080:80 aspnetcore/generator
******************************
dockerIgnore
inspect file system changes:
docker diff docker_Initials
inspect the image:
docker inspect aspnetcore/generator | jq
intermediate container useful commands
cat command is to see content of file.
docker database.
dockerfile for multiplr application ref

////Adam-Freeman///

Listing 4-8. Creating a Custom Image in the ExampleApp Folder
docker build . -t apress/exampleapp -f Dockerfile
The docker build command creates a new image. The period that follows the build keyword provides
the context, which is the location that is used for commands such as COPY in the Docker file. The -t argument
tags the new image as apress/exampleapp, and the -f argument specifies the Docker file that contains
the instructions for creating the image. (The convention for naming images is to use your name or your
organization’s name, followed by the application name.)


Listing 4-9. Creating a Container
docker create -p 3000:80 --name exampleApp3000 apress/exampleapp
The docker create command is used to create a new image.
The -p argument to the docker create command tells Docker how to map port 80 inside the container
to the host operating system. In this case, I have specified that port 80 inside the container should be
mapped to port 3000 in the host operating system. This corresponds to the EXPOSE command in the Docker
file in Listing 4-6.
The --name argument assigns a name to the container, which makes it easier to work with once it
has been created. The name in this case is exampleApp3000, indicating that this container will respond to
requests sent to port 3000 in the host operating system.
The final argument tells Docker which image to use as the template for the new container. This
command specifies the apress/exampleapp image, which is the name used with the docker build
command in Listing 4-8.

Listing 4-15. Stopping All Containers
docker stop $(docker ps -q)
The only argument required for the docker ps command is -q. The -a argument is not used because
only the IDs of running containers are needed for the stop command, and this is what the ps command
returns by default.

Listing 4-5. Deleting All Images
docker rmi -f $(docker images -q)
//The -f argument is used to remove images even when they are being used by containers

#Imp:
Windows, Control+C detaches the command prompt from the container but leaves it running in the
background, and you will have to run the command in Listing 4-19 to stop the container.
Listing 4-19. Stopping a Container
docker stop exampleApp5000

REMOVING CONTAINERS AUTOMATICALLY
The docker run command can be used with the --rm argument, which tells Docker to remove the
container when it stops. Run this command to create a container that maps port 6500 in the host
container to port 80 in the new container:
docker run -p 6500:80 --rm --name exampleApp6500 apress/exampleapp
You can test the container by requesting http://localhost:6500 in the browser and by running
docker ps. Once you have checked that the container is working, stop the container using Control+C
(for Linux or macOS) or using this command (Windows).
docker stop exampleApp6500
Docker will remove the container as soon as it stops, which you can confirm by running docker ps -a
to see all the containers that exist on the system.

Listing 4-22. Modifying a Container
docker cp ./Views/Home/Index.cshtml exampleApp3000:/app/Views/Home/
The docker cp command is used to copy files in and out of containers. This command copies the
modified Index.cshtml file from the project folder in the host operating system into the /app/Views folder
in the exampleApp3000 folder, which is the folder from which the MVC application inside the container gets
its views.

--Running container with env variable. (-e -env)
--https://docs.docker.com/engine/reference/run/
docker run --rm -e "ASPNETCORE_ENVIRONMENT=Development" -it -p 7842:80  june17-v1

http://localhost:7842/api/status